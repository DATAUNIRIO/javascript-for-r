[
["index.html", "JavaScript for R Preface Disclaimer", " JavaScript for R John Coene 2020-06-06 Preface The R programming language has seen the integration of many programming languages; C, C++, Python, to name a few, can be seamlessly embedded into R so one can easily call code written in other languages from the R console. Little known to many, R works just as well with JavaScript—this book delves into the various ways both languages can work together. The ultimate aim of this work is to put the reader at ease with inviting JavaScript in their data science workflow. In that respect the book is not teaching one JavaScript but rather we show how little JavaScript can greatly support and enhance R code. Therefore focus is on integrating external JavaScript libraries and no prior knowledge of JavaScript is required. Disclaimer This book is currently a work in progress. "],
["introduction.html", "Chapter 1 Introduction Rationale Prerequisites Methods", " Chapter 1 Introduction In this chapter, after briefly going through prerequisites, we provide a rationale for integrating JavaScript with R which we support with examples, namely packages already available on CRAN. Then, we list the various ways in which one might go about making both languages work together. Finally, we end with a review of concepts fundamental to fully understand the more advanced topics residing in the forthcoming chapters. Rationale Why merge JavaScript and R? They are two fundamentally different languages that each have their strengths and weaknesses, combining the two allows making the most of their consolidated advantages and circumvent their respective limitations to produce software altogether better for it. A fair reason to use JavaScript might simply be that the thing one wants to achieve in R has already been realised in JavaScript. Why reinvent the wheel when the solution already exists and that it can be made accessible from R? The R package lawn (Chamberlain and Hollister 2019) by Ropensci integrates turf.js, a brilliant library for geo-spatial analysis. JavaScript is not required to make those computations, it could be rewritten solely in R but that would be vastly more laborious than wrapping the JavaScript API in R. library(lawn) lawn_count(lawn_data$polygons_count, lawn_data$points_count, &quot;population&quot;) ## &lt;FeatureCollection&gt; ## Bounding box: -112.1 46.6 -112.0 46.6 ## No. features: 2 ## No. points: 20 ## Properties: ## values count ## 1 200, 600 2 ## 2 0 Another great reason is that JavaScript can do things that R cannot, e.g.: run in the browser. Therefore one cannot natively create interactive visualisations with R. Plotly (Sievert et al. 2020) by Carson Sievert packages the plotly JavaScript library to let one create interactive visualisations solely from R code. library(plotly) plot_ly(diamonds, x = ~cut, color = ~clarity) Finally, JavaScript can work together with R to improve how we communicate insights. One of the many ways in which Shiny stands out is that it lets one create web applications solely from R code with no knowledge of HTML, CSS, or JavaScript but that does not mean they can’t extend Shiny, quite the contrary. The waiter package (Coene 2020) integrates a variety of JavaScript libraries to display loading screens in Shiny applications. library(shiny) library(waiter) ui &lt;- fluidPage( use_waiter(), # include dependencies actionButton(&quot;show&quot;, &quot;Show loading for 3 seconds&quot;) ) server &lt;- function(input, output, session){ # create a waiter w &lt;- Waiter$new() # on button click observeEvent(input$show, { w$show() Sys.sleep(3) w$hide() }) } shinyApp(ui, server) Hopefully this makes a couple of great reasons and alluring examples to entice you to persevere with this book. Prerequisites The code contained in the following pages is approachable to readers with basic knowledge of R, although familiarity with package development using devtools (Wickham, Hester, and Chang 2020), as well as the Shiny (Chang et al. 2020) framework is helpful. The reason for the former is that some of the ways one builds integrations with JavaScript naturally take the form of R packages. The following section thus runs over the essentials of building a package to ensure everyone can keep up. As both Shiny and JavaScript run in the browser they make for axiomatic companions; we’ll therefore use Shiny extensively. Only basic knowledge of JavaScript is required to understand and learn from the book as not only is JavaScript rather uncomplicated and its syntax similar to R’s in places, we write surprisingly little of it. Understanding of JSON and HTML, however, is essential. In essence, if one has already used external JavaScript libraries in HTML or R markdown documents then one is well-equipped to tackle this book but in the event that you have not, we will go through a quick review of the basics of both JavaScript and JSON. It is highly recommended to use the freely available RStudio IDE to follow along, particularly if you are beginner in R. Package Development Developing packages used to be notoriously difficult but things have greatly changed, namely thanks to the devtools and more recent usethis (Wickham and Bryan 2020) packages. The first is specifically designed to help creating packages; setting up tests, running checks, building and installing packages, etc. The second, usethis, more broadly helps setting up projects, and automating repetitive tasks. Here, we only skim over the fundamentals, there is an entire book by Hadley Wickham called R Packages solely dedicated to the topic. Start by installing the two packages from CRAN. install.packages(c(&quot;devtools&quot;, &quot;usethis&quot;)) We’ll create an admittedly ridiculous package to explain how it works. Despite being useless, this package will introduce certain concepts of package development that are essential to understand for what is following. The package will be named “test” and will provide a single function that will print a JavaScript file stored inside our package. Useless but bear with it. Let’s create the package, either do so using the RStudio IDE or with usethis. From the RStudio IDE go to File &gt; New Project &gt; New Directory then select “R package” and fill in the small form. But it could be argued that it’s actually easier with usethis; type the code below in your R console to create a package named “test” in your current directory. If you run it from RStudio a new project window should open. usethis::create_package(&quot;test&quot;) This creates an empty package called “test”. Let’s add the JavaScript file that the yet-to-be-written R function will eventually print out. R packages must follow strict rules, this file cannot be placed anywhere we want; it must be stored in a directory called inst which stands for “installation;” these are files that will simply be copied to the users’ machine when they install your package. Create the inst directory in the root of the package (e.g.: next to the already existing R) and place a file called javascript.js within it. Let’s create the following, extremely simple JavaScript file that contains code which declares a variable named x. // inst/javascript.js var x = 3; This can all be done from the R console as shown below. dir.create(&quot;inst&quot;) # create directory writeLines(&quot;var x = 3;&quot;, con = &quot;inst/javascript.js&quot;) # create file This should produce a directory looking something like: DESCRIPTION NAMESPACE R/ inst/ |-- javascript.js Onto creating the R function that will read and print this file. Then again, R is strict, R files must be placed in the R directory. Then again, this can be done from the console or the RStudio IDE. # create the file from the R console file.create(&quot;R/function.R&quot;) In the function.R file we just created we place a function that reads the javascript.js file and prints it to the R console. In order to read the file one needs to locate it, as packages are destined to be shared and installed on different machines one can never use absolute paths, where the javascript.js file is located will depend on where the user has installed the package: as the developer you can never know that for sure. Therefore R comes with a system.file function which will look for a file relative to a package inst directory and return its full path. # R/function.R print_file &lt;- function(){ # look for javascript.js in the inst folder of the test package file &lt;- system.file(&quot;javascript.js&quot;, package = &quot;test&quot;) } With the file path one can read the contents of the file and print it. print_file &lt;- function(){ file &lt;- system.file(&quot;javascript.js&quot;, package = &quot;test&quot;) content &lt;- readLines(file) print(content) } Let’s add a pretty message, using the cli (Csárdi 2020) package, before we print the file as it allows introducing another concept; using external libraries in our package. To use cli we can run: # install.packages(&quot;cli&quot;) usethis::use_package(&quot;cli&quot;) ## ✔ Adding &#39;cli&#39; to Imports field in DESCRIPTION ## ● Refer to functions with `cli::fun()` It does exactly what it printed. The DESCRIPTION file includes information about the package and, very importantly, dependencies. The package we are creating will depend on the cli package; the DESCRIPTION file essentially tells R to check whether it is installed on the machine, if not it installs it (packages are for sharing). You should now see the following entry in the DESCRIPTION file. Imports: cli We can add cli to our function, note that we use the namespace (or package name) followed by a double colon, as was printed by the usethis::use_package function we ran earlier. print_file &lt;- function(){ file &lt;- system.file(&quot;javascript.js&quot;, package = &quot;test&quot;) cli::cli_alert_info(&quot;JavaScript code below.&quot;) content &lt;- readLines(file) print(content) } It’s not done just yet. Let’s demonstrate why: it allows introducing devtools. We can install the “test” package we created with devtools::install(), afterwards we can expect to be able to run the print_file function we wrote but it returns the following error: could not find function \"print_file\". Odd. This is because we have not explicitly “exported” the function, by default functions and objects declared in .R files (in packages) can only be used internally (within the package itself). In order to export it we need another package called roxygen2 (Wickham et al. 2020), it allows writing the documentation in the .R file rather than have to create separate file, a lifesaver. Note that roxygen2 should already be installed on your machine. Using said documentation we can specify which function should be exported with a “tag”. Tags are preceded by #' @, there are plenty of them, we don’t explore any other here. #&#39; @export print_file &lt;- function(){ file &lt;- system.file(&quot;javascript.js&quot;, package = &quot;test&quot;) cli::cli_alert_info(&quot;JavaScript code below.&quot;) content &lt;- readLines(file) print(content) } Now one can run devtools::document() to document the package based on the tag we added: this exports the function. Then we can run devtools::install() to build and install the package. test::print_file() ## ℹ JavaScript code below. ## [1] &quot;var x = 3;&quot; Finally, the cyclical nature of building packages substitute devtools::install() with devtools::load_all(), the latter does not install the package and simply loads all the functions and objects of the package in the environment, this is much faster than installing it. Write some code Run devtools::document() Run devtools::load_all() Repeat Note the package we built is good enough for your own machine but won’t pass CRAN checks as we miss a lot of the documentation (roxygen2 tags). JSON JSON (JavaScript Object Notation) is a very popular data interchange format with which we will work extensively throughout this book, it is thus crucial that we have a good understanding of it before we plunge into the nitty-gritty. As one might foresee, if we want two languages to work together it is essential that we have a data format that can be understood by both—JSON lets us harmoniously pass data from one to the other. While it is natively supported in JavaScript, it can be graciously handled in R with the jsonlite package (Ooms 2020), in fact it is the serialiser used internally by all of the methods detailed in the previous section. JSON is to all intents and purposes the equivalent of lists in R; a flexible data format that can store pretty much anything. Below we create a nested list and convert it to JSON with the help of jsonlite, we set pretty to TRUE to add indentation for clearer printing but this is an argument you should omit when writing production code, it will reduce the file size (fewer spaces = smaller file size). # install.packages(&quot;jsonlite&quot;) library(jsonlite) lst &lt;- list( a = 1, b = list( c = c(&quot;A&quot;, &quot;B&quot;) ), d = 1:5 ) toJSON(lst, pretty = TRUE) ## { ## &quot;a&quot;: [1], ## &quot;b&quot;: { ## &quot;c&quot;: [&quot;A&quot;, &quot;B&quot;] ## }, ## &quot;d&quot;: [1, 2, 3, 4, 5] ## } Looking closely at the list and JSON output above one quickly sees the resemblance. Something seems odd though, the first value in the list (a = 1) was serialised to an array (vector) of length one (\"a\": [1]) where one would probably expect an integer instead, 1 not [1]. This is not a mistake, we often forget that there are no scalar types in R and that a is in fact a vector as we can observe below. x &lt;- 1 length(x) ## [1] 1 is.vector(x) ## [1] TRUE JavaScript, on the other hand, does have scalar types, more often than not we will want to convert our vectors of length one to scalar types rather than arrays of length one. To do so we need use the auto_unbox argument in jsonlite::toJSON, we’ll do this most of the time we have to convert data to JSON. toJSON(lst, pretty = TRUE, auto_unbox = TRUE) ## { ## &quot;a&quot;: 1, ## &quot;b&quot;: { ## &quot;c&quot;: [&quot;A&quot;, &quot;B&quot;] ## }, ## &quot;d&quot;: [1, 2, 3, 4, 5] ## } As demonstrated above the vector of length one was “unboxed” into an integer, with auto_unbox set to TRUE jsonlite will properly convert such vectors into their appropriate type; integer, numeric, boolean, etc. If JSON is more or less the equivalent of lists in R one might wonder how jsonlite handles dataframes. # subset of built-in dataset df &lt;- cars[1:2, ] toJSON(df, pretty = TRUE) ## [ ## { ## &quot;speed&quot;: 4, ## &quot;dist&quot;: 2 ## }, ## { ## &quot;speed&quot;: 4, ## &quot;dist&quot;: 10 ## } ## ] What jsonlite does internally is essentially turn the data.frame into a list rowwise to produce a sub-list for every row then it serialises to JSON. This is generally how rectangular data is represented in lists, for instance, purrr::transpose does the same. We can reproduce this with the snippet below, we remove row names and use apply to turn every row into a list. row.names(df) &lt;- NULL df_list &lt;- apply(df, 1, as.list) toJSON(df_list, pretty = TRUE, auto_unbox = TRUE) ## [ ## { ## &quot;speed&quot;: 4, ## &quot;dist&quot;: 2 ## }, ## { ## &quot;speed&quot;: 4, ## &quot;dist&quot;: 10 ## } ## ] Jsonlite of course also enables reading data from JSON into R with the function fromJSON. json &lt;- toJSON(df) # convert to JSON fromJSON(json) # read from JSON ## speed dist ## 1 4 2 ## 2 4 10 It’s important to note that jsonlite did the conversion back to a data frame. Therefore the code below also returns a data frame even though the object we initially converted to JSON is a list. class(df_list) ## [1] &quot;list&quot; json &lt;- toJSON(df_list) fromJSON(json) ## speed dist ## 1 4 2 ## 2 4 10 Jsonlite provides many more options and functions that will let you tune how JSON data is read and written. Also, the jsonlite package does far more than what we detailed in this section but at this juncture this is an adequate understanding of things. JavaScript The book is not meant to teach one JavaScript, only to show how graciously it can work with R; in that endeavour we aim at writing little JavaScript so the book remains approachable to a wide audience. Let us just go through the very basics to ensure we know enough to get started with the next chapter. In the event that you would want to try what we briefly explore here: the easiest way is to create an HTML file (e.g.: index.html), write your code within a script tag and open the file in your web browser. The output can be observed in the console of the browser which can be opened with a right click and selecting “inspect” then going to the “console” tab. &lt;!–– index.html ––&gt; &lt;html&gt; &lt;head&gt; &lt;/head&gt; &lt;body&gt; &lt;p id=&quot;content&quot;&gt;Trying JavaScript!&lt;/p&gt; &lt;/body&gt; &lt;script&gt; // place your JavaScript code here &lt;/script&gt; &lt;/html&gt; The first difference with R is that the end of every line should be marked with a semi-colon. JavaScript code will often work without but one should always include them to avoid future headaches. Below we use console.log, JavaScript equivalent of R’s print function. console.log(&quot;hello JavaScript&quot;) // bad console.log(&quot;hello JavaScript&quot;); // good Another difference is that variables must be declared with keywords such as var or const to declare a constant. x = 1; // bad var x = 1; // good One can declare a variable without assigning a value to it, to then do so later on. // good var y; y = [1,2,3]; // define it as array y = &#39;string&#39;; // change to character string In R like in JavaScript, variables can be accessed from the parent environment (often referred to as “context” in the latter). One immense difference though is that while it is seen as bad practice in R it is not in JavaScript where it comes very useful. # it works but don&#39;t do this in R x &lt;- 123 foo &lt;- function(){ print(x) } foo() ## [1] 123 The above R code can be re-written in JavaScript. Note the slight variation in the function declaration. // this is perfectly fine var x = 1; function foo(){ console.log(x); } foo() One concept which does not exist in R is that of the “DOM” which stands for Document Object Model. When a web page is loaded, the browser creates a Document Object Model of the web page which can be accessed in JavaScript from the document object. This lets the developer programmatically manipulate the page itself so one can for instance, add an element (e.g.: a button), change the text of another, and plenty more. The JavaScript code below grabs the element where id='content' from the document with getElementById and replaces the text (innerText). Even though our page only contains “Trying JavaScript!” when the page is opened (loaded) in your web browse JavaScript runs our code and changes it: this happen very fast so you likely don’t even see the original text. &lt;!–– index.html ––&gt; &lt;html&gt; &lt;head&gt; &lt;/head&gt; &lt;body&gt; &lt;p id=&quot;content&quot;&gt;Trying JavaScript!&lt;/p&gt; &lt;/body&gt; &lt;script&gt; var cnt = document.getElementById(&quot;content&quot;); cnt.innerText = &quot;The text has changed&quot;; &lt;/script&gt; &lt;/html&gt; This of course only scratches the surface of JavaScript but provides ample understanding of the language to keep up with the next chapters. Also, a somewhat interesting fact that will prove useful later in the book: the RStudio IDE is actually is a browser, therefore, in the IDE, one can right-click and “inspect element” to rendered source code. Methods Though perhaps not obvious at first, all of the packages used as examples in the previous section internally interface with JavaScript very differently. As we’ll discover, there many ways in which one can blend JavaScript with R, generally the way to go about it is dictated by the nature of what is to be achieved. Let’s list the methods available to us to blend JavaScript with R before covering them each in-depth in their own respective chapter later in the book. V8 V8 by Jeroen Ooms is an R interface to Google’s JavaScript engine. It will let you run JavaScript code directly from R and get the result back, it even comes with an interactive console. This is the way the lawn package used in a previous example internally calls turf.js. library(V8) ## Using V8 engine 3.14.5.9 ctx &lt;- v8() ctx$eval(&quot;2 + 2&quot;) # this is evaluated in JavaScript! ## [1] &quot;4&quot; htmlwidgets htmlwidgets (Vaidyanathan et al. 2019) specialises in wrapping JavaScript libraries that generate visual outputs. This is what packages such as plotly, DT (Xie, Cheng, and Tan 2020), highcharter (Kunst 2019), and many more use to provide interactive visualisation with R. It is by far the most popular integration out there, at the time of writing this it has been downloaded nearly 10 million times from CRAN. It will therefore be covered extensively in later chapters. Shiny The Shiny framework allows creating applications accessible from web browsers where JavaScript natively runs, it follows that JavaScript can run alongside such applications. Often overlooked though, the two can also work hand-in-hand as one can pass data from the R server to the JavaScript front-end and vice versa. Some form of that tends to be included in htmlwidgets so one can pick up server-side which point on a scatter plot was clicked for instance. reactR ReactR (Inc et al. 2019) is an R package that emulates very well htmlwidgets but specifically for the React framework. Unlike htmlwidgets it is not limited to visual outputs and also provides functions to build inputs, e.g.: a drop-down menu (like shiny::selectInput). The reactable package (Lin 2019) uses reactR to enable building interactive tables solely from R code. reactable::reactable(iris[1:5, ], showPagination = TRUE) Note that custom Shiny inputs can also be built, this is however not covered in this book for it is very well documented. bubble bubble (Fay 2020) by Colin Fay is a more recent R package, still under heady development but very promising: it lets one run node.js code in R, comes with an interactive node REPL, the ability to install npm packages, and even an R markdown engine. It’s similar to V8 in many ways. library(bubble) n &lt;- NodeSession$new() n$eval(&quot;2 + 2&quot;) # this is evaluated in node.js ## 4 r2d3 r2d3 (Luraschi and Allaire 2018) by RStudio is an R package designed specifically to work with d3.js. It is similar to htmlwidgets but works rather differently. # https://rstudio.github.io/r2d3/articles/gallery/chord/ r2d3::r2d3(data = matrix(round(runif(16, 1, 10000)), ncol = 4, nrow = 4), script = &quot;chord.js&quot;) The packages bubble and V8 are intended for use of JavaScript for computations while r2d3, htmlwidgets, and reactR are designed to produce visual outputs (e.g.: graphs and tables), using JavaScript in Shiny can of course be used for the latter but is certainly not limited to that. References "],
["the-v8-engine.html", "Chapter 2 The V8 Engine Installation Basics External Libraries With Npm Use in Packages", " Chapter 2 The V8 Engine V8 is an R interface to Google’s open source JavaScript engine of the same name, it powers Google Chrome, node.js and many other things. It is the first integration of JavaScript with R that we cover in this book. Both the V8 package and the engine it wraps are simple yet amazingly powerful. Installation First install the V8 engine itself, instructions to do so are well detailed on V8’s README and below. On Debian or Ubuntu use the code below from the terminal to install libv8. sudo apt-get install -y libv8-dev On Centos install v8-devel, which requires the EPEL tools. sudo yum install epel-release sudo yum install v8-devel On Mac OS use Homebrew. brew install v8 Then install the R package from CRAN. install.packages(&quot;V8&quot;) Basics V8 provides a reference class via R6 (Chang 2019), which pertains to object-oriented programming, hence it might look unconventional to many R users. It’s nonetheless easy to grasp. If one wants to learn more about the R6’s reference class system Hadley Wickham has a very good chapter on it in his Advanced R book. Let’s explore the basic functionalities of the package. First, load the library and use the function v8 to instantiate a class. library(V8) engine &lt;- v8() The eval method allows running JavaScript code from R and retrive the results. engine$eval(&quot;var x = 3 + 4;&quot;) # this is evealuated in R engine$eval(&quot;x&quot;) ## [1] &quot;7&quot; Two observations on the above snippet of code. First, the variable we got back in R is a character vector when it should have been either an integer or a numeric. This is because we used the eval method which merely prints the output, get is more appropriate; it converts it to an appropriate R equivalent. # retrieve our previously created variable (x &lt;- engine$get(&quot;x&quot;)) ## [1] 7 class(x) ## [1] &quot;integer&quot; Second, while creating a scalar with eval(\"var x = 1;\") appears painless, imagine if you will the horror of having to convert a data frame to a JavaScript array via jsonlite then flatten it to character string so it can be used with the eval method. Horrid. Thankfully V8 comes with a method assign, complimentary to get, which declares R objects as JavaScript variables. It takes two arguments, first the name of the variable to create, second the object to assign to it. # assign and retrieve a data.frame engine$assign(&quot;vehicles&quot;, cars[1:3, ]) engine$get(&quot;vehicles&quot;) ## speed dist ## 1 4 2 ## 2 4 10 ## 3 7 4 All of the conversion is handled by V8 internally with jsonlite as demonstrated in the previous chapter. We can confirm that the data frame was converted to a list rowwise; using JSON.stringify to display how the object is store in V8. cat(engine$eval(&quot;JSON.stringify(vehicles, null, 2);&quot;)) ## [ ## { ## &quot;speed&quot;: 4, ## &quot;dist&quot;: 2 ## }, ## { ## &quot;speed&quot;: 4, ## &quot;dist&quot;: 10 ## }, ## { ## &quot;speed&quot;: 7, ## &quot;dist&quot;: 4 ## } ## ] However the cyclical loop of 1) creating a variable in JavaScript to 2) run a function on the aforementioned object 3) get the results back in R, can be tedious. So V8 also allows calling JavaScript functions on R objects directly with the call method and obtain the results back in R. engine$eval(&quot;new Date();&quot;) # using eval ## [1] &quot;Sat Jun 06 2020 11:23:53 GMT+0200 (CEST)&quot; engine$call(&quot;Date&quot;, Sys.Date()) # using call ## [1] &quot;Sat Jun 06 2020 11:23:53 GMT+0200 (CEST)&quot; Finally, one can run code interactively rather than as strings by calling the console from the engine with engine$console() you can then exit the console by typing exit or hitting the ESC key. External Libraries V8 is actually quite bare in and of itself, there is for instance no functionalities built-in to read or write files from disk, it thus becomes truly interesting when you can use it JavaScript libraries. We do so with the source method which takes a file argument that will accept a path or URL to a JavaScript file to source. We’ll demonstrate this using fuse.js a fuzzy-search library. engine$source(&quot;https://cdnjs.cloudflare.com/ajax/libs/fuse.js/3.4.6/fuse.min.js&quot;) ## [1] &quot;true&quot; You can think of it as using the script tag in HTML to source (src) said file from disk or CDN. &lt;html&gt; &lt;head&gt; &lt;script src=&#39;https://cdnjs.cloudflare.com/ajax/libs/fuse.js/3.4.6/fuse.min.js&#39;&gt;&lt;/script&gt; &lt;/head&gt; &lt;body&gt; &lt;p&gt;Content&lt;/p&gt; &lt;/body&gt; &lt;/html&gt; With the library imported we can use its functionalities. We’ll replicate an example from fuse.js official website where it executes a search on an object that contains books and looks like JSON below. var books = [{ &#39;ISBN&#39;: &#39;A&#39;, &#39;title&#39;: &quot;Old Man&#39;s War&quot;, &#39;author&#39;: &#39;John Scalzi&#39; }, { &#39;ISBN&#39;: &#39;B&#39;, &#39;title&#39;: &#39;The Lock Artist&#39;, &#39;author&#39;: &#39;Steve Hamilton&#39; }] This can be easily created, as we’ve already seen this is just how V8 creates data frames. We define a data.frame of books that looks similar and load it into our engine. books &lt;- data.frame( title = c( &quot;Rights of Man&quot;, &quot;Black Swan&quot;, &quot;Common Sense&quot;, &quot;Sense and Sensibility&quot; ), id = c(&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;) ) engine$assign(&quot;books&quot;, books) Then again we can make sure that the data.frame was turned into a rowwise JSON object. cat(engine$eval(&quot;JSON.stringify(books, null, 2);&quot;)) ## [ ## { ## &quot;title&quot;: &quot;Rights of Man&quot;, ## &quot;id&quot;: &quot;a&quot; ## }, ## { ## &quot;title&quot;: &quot;Black Swan&quot;, ## &quot;id&quot;: &quot;b&quot; ## }, ## { ## &quot;title&quot;: &quot;Common Sense&quot;, ## &quot;id&quot;: &quot;c&quot; ## }, ## { ## &quot;title&quot;: &quot;Sense and Sensibility&quot;, ## &quot;id&quot;: &quot;d&quot; ## } ## ] Now we can define options for our search, we don’t get into the details of fuse.js here as this is not the purpose of this book, you can read more about the options in the examples section of the site. We can mimic the format of the JSON options shown on the website with a simple list and assign that to our engine. If this confuses read the JSON section of the introduction. // JavaScript var options = { keys: [&#39;title&#39;], id: &#39;id&#39; } # R options &lt;- list( keys = list(&quot;title&quot;), id = &quot;id&quot; ) engine$assign(&quot;options&quot;, options) Then we can finish the second step of the online examples, instantiate a fuse.js object with our books and options objects then make a simple search, we assign the results of the search to an object which we then retrieve in R with get. engine$eval(&quot;var fuse = new Fuse(books, options)&quot;) engine$eval(&quot;var results = fuse.search(&#39;sense&#39;)&quot;) engine$get(&quot;results&quot;) ## [1] &quot;d&quot; &quot;c&quot; A search for “sense” returns a vector of ids where the term “sense” was found; c and d or the books Common Sense, Sense and Sensibility. We could perhaps make that last code simpler using the call method. engine$call(&quot;fuse.search&quot;, &quot;sense&quot;) ## [1] &quot;d&quot; &quot;c&quot; With Npm We can also use npm packages, though not all will work. Npm is Node’s Package Manager, or in a sense Node’s equivalent of CRAN. To use npm packages we need browserify, a node library to bundle all dependencies of an npm package into a single, file which we can subsequently source in V8. Browserify is itself an npm package and there requires node and npm installed. You can install browserify globally with the following command from the terminal. npm install -g browserify We can now browserify an npm package. To demonstrate we will use ms which converts various time formats to milliseconds. First we install the package. npm install ms Then we browserify it. The first line creates a file called in.js which contains global.ms = require('ms'); we then call browserify on that file specifying ms.js as output file. echo &quot;global.ms = require(&#39;ms&#39;);&quot; &gt; in.js browserify in.js -o ms.js We can now source ms.js with v8. library(V8) ms &lt;- v8() ms$source(&quot;ms.js&quot;) Then use the library. ms$eval(&quot;ms(&#39;2 days&#39;)&quot;) ## [1] &quot;172800000&quot; ms$eval(&quot;ms(&#39;1y&#39;)&quot;) ## [1] &quot;31557600000&quot; Use in Packages In this section we detail how one should go about using V8 in an R package, if you are not familiar with package development you can skip ahead. Create a package however you usually do, using usethis, devtools or the RStudio IDE interface. Below we create a package called “ms” that will hold functionalities we explored in the previous section on npm packages. R -e &quot;usethis::create_package(&#39;ms&#39;)&quot; cd ./ms The package is going to rely on V8 so you can add it under Imports in the DESCRIPTION. We are going to need to instantiate the class at some point (engine &lt;- v8()). One could perhaps require the user to do create such an object but it would not be convenient. Instead we can use .onLoad. You can read more about this function Hadley Wickham’s Advanced R book. The Python integration of R, reticulate (Ushey, Allaire, and Tang 2019) also advises this method to import modules too. We often see this function placed in a zzz.R file. # zzz.R ms &lt;- NULL .onLoad &lt;- function(libname, pkgname){ ms &lt;&lt;- v8() } Our package should also include the external library ms.js we built from the npm package. We should place it in the inst directory. Create it and place the ms.js file within the latter. mkdir -p inst This should give a directory similar to this, for brevity we exclude DESCRIPTION, NAMESPACE, and other files that make up a package. R/ | zzz.R inst/ | -- ms.js Now the dependency can be sourced in the .onLoad function. We can access the files in the inst directory with the system.file function. When using the .onLoad function it is good practice to clean up with .onUnload. # zzz.R ms &lt;- NULL .onLoad &lt;- function(libname, pkgname){ ms &lt;&lt;- V8::v8() dep &lt;- system.file(&quot;ms.js&quot;, package = &quot;ms&quot;) ms$source(dep) } .onUnload &lt;- function(libpath){ ms$reset() } We can then create a to_ms function, it will have access the ms object we instantiated in .onLoad. #&#39; Convert To Millisecond #&#39; #&#39; Convert to milliseconds to various formats. #&#39; #&#39; @param string String to convert. #&#39; #&#39; @export to_ms &lt;- function(string){ ms$call(&quot;ms&quot;, string) } After running devtools::document() and devtools::load_all() the call to_ms(\"2 days\") will return 172800000. Finally,, remember to add V8 as dependency. usethis::use_package(&quot;V8&quot;) References "],
["node.html", "Chapter 3 Node.js with Bubble Basics R Markdown Engine Npm Use in Packages", " Chapter 3 Node.js with Bubble A more recent R package, called bubble which will will let you run node.js code from R, the package comes with an REPL and an R markdown engine. As it is still under heavy development the package is not yet available on CRAN, you can get it from Github using either the devtools or remotes package (Hester et al. 2020). # install.packages(&quot;remotes&quot;) remotes::install_github(&quot;ColinFay/bubble&quot;) Basics bubble is very similar to V8, it’s also a reference class and the name of the methods are identical. library(bubble) n &lt;- NodeSession$new() n$eval(&quot;2 + 2;&quot;) ## 4 You can also assign and get variables, just like with v8. n$assign(vehicles, cars[1:2, ]) n$get(vehicles) ## speed dist ## 1 4 2 ## 2 4 10 Bubble also comes with an REPL terminal (read-eval-print loop), which can be launched with bubble::node_repl(). R Markdown Engine Bubble comes with an R markdown engine so JavaScript code can be evaluated in node from an R markdown document such as this one. To do so we simply need to place bubble::set_node_engine() at the top of the document, subsequent node chunks will be evaluated in a node session. bubble::set_node_engine() Once set we can run node code. console.log(2 + 3); ## 5 ## undefined Npm Npm is to node.js what CRAN is to R; a repository of packages that can be conveniently installed. Such packages can be installed using another Reference class called NPM. While with V8 one needs to “browserify” npm packages in hope that they work, with bubble, since it interacts with node js directly, there is no need for to “browserify” packages and we can be assured that they work. Let us demonstrate with the natural package which provides general natural language facility. # initialise and install npm &lt;- Npm$new()$install(&quot;natural&quot;) ## ❯ Add `node_modules` to .gitignore The above snippet initialises npm, which creates the pacakge.json file and a node_modules directory. The first is a DESCRIPTION file for node projects so to speak, the latter is a directory to hold dependencies installed. The packages can then be imported in the node session and interacted with. n$eval(&quot;const natural = require(&#39;natural&#39;)&quot;) ## undefined n$eval(&quot;var tokenizer = new natural.WordTokenizer();&quot;) ## undefined n$eval(&quot;tokenizer.tokenize(&#39;Using nodejs from R with npm.&#39;)&quot;) ## [ &#39;Using&#39;, &#39;nodejs&#39;, &#39;from&#39;, &#39;R&#39;, &#39;with&#39;, &#39;npm&#39; ] Use in Packages To demonstrate how to use bubble in packages we shall build one to hold the functions we explored in the previous section. Create a package called “organic” using devtools, the RStudio IDE, or usethis as shown below. usethis::create_package(&quot;organic&quot;) Then edit the DESCRIPTION file so that it imports the bubble package, since it is not yet on CRAN the Github dependency should be specified under Remotes. Package: organic Title: Natural Language Facilities Imports: bubble Remotes: ColinFay/bubble References "],
["get-started.html", "Chapter 4 Get Started Static Files", " Chapter 4 Get Started Shiny is by far most popular, if not the only, web framework for the R programming language. In this chapter, after brushing up on the necessary to include JavaScript in shiny applications, we explore how to blend the JavaScript language with our R server and front-end. Then again, the aim is not to write a lot of convoluted JavaScript, on the contrary, it is to write as little as possible and demonstrate to the reader that it is often enough to greatly improve the user experience of shiny applications. Making shiny work with JavaScript can essentially be broken down into two operations: 1) passing data from the R server to the JavaScript client and 2) the other way around, from the client to the R server. In this chapter every section builds upon the previous, only skip those if you truly feel confident you understand it fully or you will get confused. Static Files In order to introduce JavaScript to shiny applications one must understand static files and how they work with the framework. Static files are files that are downloaded by the clients, in this case web browsers accessing shiny applications, as-is, these generally include images, CSS (.css), and JavaScript (.js). If you are familiar with R package development, static files are to shiny applications what the “inst” directory is to an R package, those files are installed as-is and do not require further processing as opposed to the “src” folder which contains files that need compiling for instance. There are numerous ways to run a shiny application locally; the two most used probably are shinyApp and runApp. The RStudio IDE comes with a convenient “Run” button when writing a shiny application, which when clicked actually uses the function shiny::runApp in the background, this function looks for said static files in the www directory and makes them available at the same path (/www). If you are building your applications outside of RStudio, you should either also use shiny::runApp or specify the directory which then allows using shiny::shinyApp. Note that this only applies locally, shiny server (community and pro) as well as shinyapps.io use the same defaults as the RStudio IDE and shiny::runApp. In order to ensure the code in this book can run regardless of the reader’s machine or editor, the asset directory is always specified explicitly. This is probably advised to steer clear of the potential headaches as, unlike the default, it’ll work regardless of the environment. If you are using golem (Guyader et al. 2020) to develop your application then you should not worry about this as it specifies the directory internally. Below we build a basic shiny application, however, before we define the ui and server we use the shiny::addResourcePath function to specify the location of the directory of static files that will be served by the server and thus accessible by the client. This function takes two arguments, first the prefix, which is the path (URL) at which the assets will be available, second the path to the directory of static assets. We thus create the “assets” directory and a JavaScript file called script.js within it. # run from root of app (where app.R is located) dir.create(&quot;assets&quot;) writeLines(&quot;console.log(&#39;Hello JS!&#39;);&quot;, con = &quot;assets/script.js&quot;) We can now use the shiny::addResourcePath to point to this directory. Generally the same name for the directory of static assets and prefix is used so as to avoid confusion, below we name them differently in order for the reader to clearly distinguish which is which. # app.R library(shiny) # serve the files addResourcePath( # will be accessible at /files prefix = &quot;files&quot;, # path to our assets directory directoryPath = &quot;assets&quot; ) ui &lt;- fluidPage( h1(&quot;R and JavaScript&quot;) ) server &lt;- function(input, output){} shinyApp(ui, server) If you then run the application and open it at the /files/script.js path (e.g.: 127.0.0.1:3000/files/script.js) you should see the content of our JavaScript file (console.log('Hello JS!')), commenting the addResourcePath line will have a “Not Found” error displayed on the page instead. All files in your asset directory will be served online and accessible to anyone: do not place sensitive files in it. Though one may create multiple such directory and correspondingly use addResourcePath to specify multiple paths and prefixes, one will routinely specify a single one, named “assets” or “static,” which contains multiple subdirectories, one for each type of static file to obtain a directory that looks something like the tree below. This is, however, an unwritten convention which is by no means forced upon the developer: do as you wish. assets/ ├── js/ │ └── script.js ├── css/ │ └── style.css └── img/ └── pic.png At this stage we have made the JavaScript file we created accessible by the clients but we still have to source this file in our ui as currently this file is, though served, not used by our application. Were one creating a static HTML page one would use the script to src the file in the head of the page. &lt;html&gt; &lt;head&gt; &lt;!–– source the JavaScript file ––&gt; &lt;script src=&quot;path/to/script.js&quot;&gt;&lt;/script&gt; &lt;/head&gt; &lt;body&gt; &lt;p id=&quot;content&quot;&gt;Trying JavaScript!&lt;/p&gt; &lt;/body&gt; &lt;/html&gt; In shiny we write the ui in R and not in HTML (though this is also supported). Given the resemblance between the names of HTML tags and shiny UI functions it’s pretty straightforward, the html page above would look something like the shiny ui below. library(shiny) ui &lt;- fluidPage( tags$head( tags$script(src = &quot;path/to/script.js&quot;) ), p(id = &quot;content&quot;, &quot;Trying JavaScript!&quot;) ) Note that we use the tags object which comes from the shiny package and includes HTML tags that are not exported as standalone functions. For instance, you can create a &lt;div&gt; in shiny with the div function but tags$div will also work. This can now be applied to the shiny application, the path/to/script.js should be changed to files/script.js where files is the prefix we defined in addResourcePath. # app.R library(shiny) # serve the files addResourcePath(prefix = &quot;files&quot;, directoryPath = &quot;assets&quot;) ui &lt;- fluidPage( tags$head( tags$script(src = &quot;files/script.js&quot;) ), h1(&quot;R and JavaScript&quot;) ) server &lt;- function(input, output){} shinyApp(ui, server) From the browser, inspecting page (right click &gt; inspect &gt; console tab) one should see “Hello JS!” in the console which means our application correctly ran the code in our JavaScript file. References "],
["a-first-look.html", "Chapter 5 A First Look From R to JavaScript From JavaScript to R", " Chapter 5 A First Look The following sections will walk you through an example in which one first starts with a basic hello-world-like JavaScript example running in shiny and ends with a fully-fledged R package that brings new functionalities to shiny by integrating a third party library. We first build an application that passes a message from the R server to the client to display said message as a vanilla JavaScript alert (pop-up), then send back to the R server whether the user has clicked “OK” on the alert. Finally we replicate that but with an external library and wrap the whole project into a fully functional package. This package will look similar to others that provide JavaScript integrations with shiny such as shinyjs (Attali 2020) or waiter (Coene 2020). First, let’s write a barebone shiny application which includes the JavaScript code which opens an alert. library(shiny) ui &lt;- fluidPage( tags$script( &quot;alert(&#39;Hello from JavaScript&#39;);&quot; ), h1(&quot;Hello&quot;) ) server &lt;- function(input, output, session){} shinyApp(ui, server) JavaScript alert in shiny One thing important to note for later is that alerts will always block the execution of code which allows making sure some code is only run with user consent or the user being aware of the consequences. alert(&#39;delete everything?&#39;); deleteEverythingOnlyIfUserOK(); From R to JavaScript Now that we have a simple alert displayed in the application we can tie it with our R server; the alert should display a message sent by the R server, this would enable, for instance, displaying a message taken from a database or a user input. As might be expected there are two functions required to do so, an R function and its JavaScript complementary: one to send the data from the server and another to catch said data from the client and display the alert. Let us start by writing the R code to send the data, thankfully very little is required of the developer. One can send data from the R server to the client from the session object using the sendCustomMessage method. The method takes two arguments, first an identifier (where to send the data to), second the actual data to send to JavaScript. server &lt;- function(input, output, session){ # set the identifier to send-alert session$sendCustomMessage(type = &quot;send-alert&quot;, message = &quot;Hi there!&quot;) } This effectively sends our message to the JavaScript client but we are yet to use that message JavaScript-side so the application still displays the same alert on load. We can add a “handler” for the identifier we defined (send-alert) which will so something with the message we sent from the server. This is done with the addCustomMessageHandler method from the Shiny object where the first argument is the identifier and the second is the function that handles the message, generally a function that takes a single argument: the data sent from the server. tags$script( &quot;Shiny.addCustomMessageHandler(type = &#39;send-alert&#39;, function(message) { alert(message); });&quot; ) Alert sent from shiny server This enables you to pass a message that is taken from a database for instance, or as shown below from a user input, to the alert. library(shiny) ui &lt;- fluidPage( tags$script( &quot;Shiny.addCustomMessageHandler(type = &#39;send-alert&#39;, function(message) { alert(message); });&quot; ), h1(&quot;Hello&quot;), textInput(&quot;text&quot;, &quot;Text to show in alert&quot;), actionButton(&quot;submit&quot;, &quot;Show alert&quot;) ) server &lt;- function(input, output, session){ observeEvent(input$submit, { session$sendCustomMessage(type = &quot;send-alert&quot;, message = input$text) }) } shinyApp(ui, server) In the application above, notice the path that our message follows: it goes from the client to the server which sends it back to the client. This might be considered suboptimal by some as it is not necessary to use the server as intermediary (in this example at least). Though there is some truth to this the above will work perfectly fine—and our aim here is to make JavaScript work with R—not alongside it. From JavaScript to R Imagine if you will that instead of displaying a somewhat anodyne alert it was one that actually mattered where the user is warned that clicking “OK” will execute an irreversible action like the deletion of a record. In order to implement this the server would need to “know” whether the user has clicked said “OK” button. To do so one needs to pass data from the client to the server. This can be done by defining a new simplified shiny input. While one can define a fully-fledged shiny input that can be registered, updated, etc. there is also a simplified version of the latter which allows sending reactive input value to the server where it can be used just like any other inputs (input$id). The value of the input can be defined using the setInputValue method which takes the id of the input and the value to give it. tags$script( &quot;Shiny.addCustomMessageHandler(type = &#39;send-alert&#39;, function(message) { // show alert alert(message); // set to true when clicked OK Shiny.setInputValue(&#39;delete_alert&#39;, true); });&quot; ) As mentioned earlier alert blocks code execution, therefore the input value will not be defined before the button “OK” is pressed. The server can now access the input$delete_alert input which is by default NULL and set to TRUE when the user has pressed “OK,” as done in the application below which prints the input to the console when the button is clicked. library(shiny) ui &lt;- fluidPage( tags$script( &quot;Shiny.addCustomMessageHandler(type = &#39;send-alert&#39;, function(message) { alert(message); Shiny.setInputValue(&#39;delete_alert&#39;, true); });&quot; ), h1(&quot;Hello&quot;) ) server &lt;- function(input, output, session){ session$sendCustomMessage(type = &quot;send-alert&quot;, message = &quot;Deleting a record!&quot;) observeEvent(input$delete_alert, { # print TRUE when button is clicked print(input$delete_alert) }) } shinyApp(ui, server) References "],
["a-complete-integration.html", "Chapter 6 A Complete Integration Serialisation Events &amp; Callbacks As a Package Exercises", " Chapter 6 A Complete Integration Thus far this chapter has covered both ways data travels between JavaScript and R in Shiny. However, the alerts displayed in the previous sections are rather hideous and, though demonstrates how both languages can work together within shiny, comes short of illustrating how to make use of external libraries, which is frequently performed as one progressively learn a language. Let’s exploit an external library to improve upon the work done so far: jBox allows displaying modals (pop-ups), very similar to the vanilla JavaScript alerts, but much better looking and with additional functionalities. The very first thing to do is to import jBox in our project, we could download the files and use them as described in the previous static files section but it comes with very convenient CDNs detailed in the get-started page of the documentation. &lt;script src=&quot;https://code.jquery.com/jquery-3.5.1.min.js&quot;&gt;&lt;/script&gt; &lt;script src=&quot;https://cdn.jsdelivr.net/gh/StephanWagner/jBox@v1.2.0/dist/jBox.all.min.js&quot;&gt;&lt;/script&gt; &lt;link href=&quot;https://cdn.jsdelivr.net/gh/StephanWagner/jBox@v1.2.0/dist/jBox.all.min.css&quot; rel=&quot;stylesheet&quot;&gt; Note that the “j” in jBox stands for jQuery which is already a dependency of shiny itself, there is therefore no need to import it, on the contrary one should not in order to avoid clashes. We can adapt the ui of the shiny application built up to this point to import the dependencies, keeping the handler, to obtain the code below. ui &lt;- fluidPage( tags$head( tags$script( src = &quot;https://cdn.jsdelivr.net/gh/StephanWagner/jBox@v1.2.0/dist/jBox.all.min.js&quot; ), tags$link( rel = &quot;stylesheet&quot;, href = &quot;https://cdn.jsdelivr.net/gh/StephanWagner/jBox@v1.2.0/dist/jBox.all.min.css&quot; ), tags$script(&quot;Shiny.addCustomMessageHandler(type = &#39;send-alert&#39;, function(message) { // TO DO: code jBox });&quot;) ) ) The jBox library comes with numerous features to display tooltips, modals, notices, and more, which would make for too long a chapter; only notices shall be covered here. Further down the get-started document lies an example of a jBox notice. new jBox(&#39;Notice&#39;, { content: &#39;Hurray! A notice!&#39;, color: &#39;blue&#39; }); Let us copy that in the placeholder of the shiny ui already put together. library(shiny) ui &lt;- fluidPage( tags$head( tags$script( src = &quot;https://cdn.jsdelivr.net/gh/StephanWagner/jBox@v1.2.0/dist/jBox.all.min.js&quot; ), tags$link( rel = &quot;stylesheet&quot;, href = &quot;https://cdn.jsdelivr.net/gh/StephanWagner/jBox@v1.2.0/dist/jBox.all.min.css&quot; ), tags$script(&quot;Shiny.addCustomMessageHandler(type = &#39;send-alert&#39;, function(message) { new jBox(&#39;Notice&#39;, { content: &#39;Hurray! A notice!&#39;, color: &#39;blue&#39; }); });&quot;) ) ) server &lt;- function(input, output, session){ session$sendCustomMessage(type = &quot;send-alert&quot;, message = &quot;Deleting a record!&quot;) } shinyApp(ui, server) First jBox Notice With some minor changes the application can display the message passed, one only needs to replace ‘Hurray! A notice!’ with the message variable. tags$script(&quot;Shiny.addCustomMessageHandler(type = &#39;send-alert&#39;, function(message) { new jBox(&#39;Notice&#39;, { content: message, color: &#39;blue&#39; }); });&quot;) This though only allows passing a single variable, the message, to JavaScript but jBox has many more options. Serialisation Let’s delve deeper into the communication between the server and the front-end to understand how we can further customise the notice displayed, e.g.: change the colour. { content: &#39;Hurray! A notice!&#39;, color: &#39;blue&#39; } Notice that the jBox notice takes a JSON object containing the options that define said notice to display, including but not limited to the message. The most straightforward way to make all those options accessible to the server is to construct that list of options server-side before sending it to the the front-end. For instance the JSON of options displayed above would look like the R list below. list( content = &#39;Hurray! A notice!&#39;, color = &#39;blue&#39; ) Therefore one could construct this list server-side and use it in jBox straight away, without any further processing from the client. Doing so means we can simplify the JavaScript to new jBox('Notice', message); rather than use message within the JSON. library(shiny) ui &lt;- fluidPage( tags$head( tags$script( src = &quot;https://cdn.jsdelivr.net/gh/StephanWagner/jBox@v1.2.0/dist/jBox.all.min.js&quot; ), tags$link( rel = &quot;stylesheet&quot;, href = &quot;https://cdn.jsdelivr.net/gh/StephanWagner/jBox@v1.2.0/dist/jBox.all.min.css&quot; ), tags$script(&quot;Shiny.addCustomMessageHandler(type = &#39;send-alert&#39;, function(message) { // use notice send from the server new jBox(&#39;Notice&#39;, message); });&quot;) ) ) server &lt;- function(input, output, session){ # define notice options notice = list( content = &#39;Hello from the server&#39;, color = &#39;black&#39; ) # send the notice session$sendCustomMessage(type = &quot;send-alert&quot;, message = notice) } shinyApp(ui, server) Customised jBox Notice This sets a solid basis to further integrate other functionalities of jBox. Events &amp; Callbacks In the example of the vanilla JavaScript alert one could simply place a line of code after the alert() function in order to “tell” the server whether the button on the alert had been clicked. This was feasible because alert stops the execution of code, this is, however, rather uncommon in JavaScript. What is far more used are events and callback functions which are triggered upon an action is performed by the user (like the click of a button) or when other interesting things happen in the code. jBox provides numerous such events: callback functions can be used when a modal is closed or when it is created for instance. The concept of the callback function is not totally foreign to R albeit rarely used. Shiny comes with such functions, e.g.: shiny::onStop. This allows having a function be triggered when the application exits (useful to close database connections for instance). server &lt;- function(input, output){ shiny::onStop( # callback function fired when app is closed function(){ cat(&quot;App has been closed&quot;) } for instance ) } In jBox, these callback functions are included in the JSON of options, below the onClose event is fired when the notice is closed. { content: &#39;Alert!&#39;, onClose: function(){ // Fired when closed console.log(&#39;Alert is closed&#39;); } } This raises one issue, one cannot truly serialise an object of type function (there are exceptions later in the book). # try to serialise an R function jsonlite::toJSON(function(x){x + 1}) ## [&quot;function (x) &quot;,&quot;{&quot;,&quot; x + 1&quot;,&quot;}&quot;] One solution is to append the callback function to the object of options JavaScript-side. tags$script(&quot;Shiny.addCustomMessageHandler(type = &#39;send-alert&#39;, function(message) { // append callback message.onClose = function(){ Shiny.setInputValue(&#39;alert_close&#39;, true); } new jBox(&#39;Notice&#39;, message); });&quot;) Placing a function inside a JSON object is common in JavaScript, in contrast with R where though it works is rarely if ever done (outside of reference class/R6). The above JavaScript code to append the callback function could look something like the snippet below in R. message &lt;- list(content = &quot;hello&quot;) message$onClose &lt;- function(x){ x + 1 } message$onClose(2) ## [1] 3 That done it can be incorporated into the application built thus far. Something interesting could be done server-side but for the sake of this example we merely print the value of the input to the R console. library(shiny) ui &lt;- fluidPage( tags$head( tags$script( src = &quot;https://cdn.jsdelivr.net/gh/StephanWagner/jBox@v1.2.0/dist/jBox.all.min.js&quot; ), tags$link( rel = &quot;stylesheet&quot;, href = &quot;https://cdn.jsdelivr.net/gh/StephanWagner/jBox@v1.2.0/dist/jBox.all.min.css&quot; ), tags$script(&quot;Shiny.addCustomMessageHandler(type = &#39;send-alert&#39;, function(message) { message.onClose = function(){ Shiny.setInputValue(&#39;alert_close&#39;, true); } new jBox(&#39;Notice&#39;, message); });&quot;) ) ) server &lt;- function(input, output, session){ # define notice options notice = list( content = &#39;Hello from the server&#39;, color = &#39;black&#39; ) # send the notice session$sendCustomMessage(type = &quot;send-alert&quot;, message = notice) # print the output of the alert_close event (when fired) observeEvent(input$alert_close, { print(input$alert_close) }) } shinyApp(ui, server) As a Package If confused by any of the following please visit the package development section in the first chapter. Packages are a fundamental part of R and allow conveniently sharing and reusing code. The work done so far is probably fitting for a single application but one should not have to reproduce all of that every time one wants to use jBox in a shiny application: we ought to wrap these functionalities into a handy package that can be used, reused and shared with others. Moreover, this will benefit from all the other advantages that R packages bring to code such as documentation, reproducibility, and tests. Before we delve into building the package let us think through what it should include. The application using jBox gives some indication as to what the package will look like. Users of the package should be able to reproduce what is executed in the application, namely import dependencies (including the message handler) as well as send data to the JavaScript front-end. Finally, we shall provide, with the package, a static directory of dependencies to avoid relying on the CDNs as this ensures reproducibility (code hosted online by third-party might change and break the package). Concretely, the package will export a useJbox function to be placed in the shiny ui to import the dependencies (essentially replacing the tags$*) and a function to send the alert from the server to the client. Let’s start by creating an R package, here we name it “jbox,” after the JavaScript of the same name, partly because the author lacks creativity: feel free to name it however you want. usethis::create_package(&quot;jbox&quot;) Dependencies If confused by any of the following please visit the static files section of this chapter. The very first thing that is required are the dependencies without which nothing can work, let’s create a directory of static assets, download and place the jBox CSS and JavaScript files within it. We create the directory “inst” as per the R package convention and within it create another to hold our assets. # create directories dir.create(&quot;inst/assets&quot;, recursive = TRUE) The jBox files can be downloaded from the CDN and placed within the directory that was created above. Moreover, we also create an empty JavaScript file that will eventually contain the custom JavaScript code that “connects” R to JavaScript. # URLs of CDNs js_dep &lt;- &quot;https://cdn.jsdelivr.net/gh/StephanWagner/jBox@v1.2.0/dist/jBox.all.min.js&quot; css_dep &lt;- &quot;https://cdn.jsdelivr.net/gh/StephanWagner/jBox@v1.2.0/dist/jBox.all.min.css&quot; # download download.file(js_dep, destfile = &quot;./inst/assets/jBox.all.min.js&quot;) download.file(css_dep, destfile = &quot;./inst/assets/jBox.all.min.css&quot;) # create file to eventually hold custom JavaScript file.create(&quot;./inst/assets/custom.js&quot;) This done one should obtain a directory that looks similar to the tree below (some files and folders omitted for brevity). DESCRIPTION R/ inst/ ├── assets/ │ ├── jBox.all.min.js │ └── jBox.all.min.css Next, one needs to have those files served, the user of the package could be asked to use shiny::addResourcePath but it’s very inelegant, this should be built-in the package so the user does not even have to know this happening in the background. Therefore, we ought to ensure the static files are served when the user uses the package. Packages can optionally run functions when it is loaded or attached, Hadley Wickham writes about it extensively in the namespace chapter of his book on R packages. By convention, these functions are placed in a zzz.R file. file.create(&quot;./R/zzz.R&quot;) The difference between loading and attaching a package can be subtle, in this case it’s probably best to run the function when the package is loaded using onLoad which the R Packages book describes as: Loading will load code, data and any DLLs; register S3 and S4 methods; and run the .onLoad() function. After loading, the package is available in memory, but because it’s not in the search path, you won’t be able to access its components without using ::. Confusingly, :: will also load a package automatically if it isn’t already loaded. It’s rare to load a package explicitly, but you can do so with requireNamespace() or loadNamespace(). The addResourcePath function should thus be placed within the .onLoad function, this way the files are served by shiny when the package is loaded. Note the few changes below, we refer to the path using system.file (detailed in the Package Development section) and change the the prefix to jbox-assets to avoid the url serving our static files to clash with others. # R/zzz.R .onLoad &lt;- function(libname, pkgname) { shiny::addResourcePath( &quot;jbox-assets&quot;, system.file(&quot;assets&quot;, package = &quot;jbox&quot;) ) } This serves the file and allows not having to explicitly use addResourcePath but the package nonetheless needs to feature a function to let the user import them into their application. #&#39; Import Dependencies #&#39; @export usejBox &lt;- function(){ shiny::tags$head( shiny::tags$script(src = &quot;jbox-assets/jBox.all.min.js&quot;), shiny::tags$link(rel = &quot;stylesheet&quot;, href = &quot;jbox-assets/jBox.all.min.css&quot;), shiny::tags$script(src = &quot;jbox-assets/custom.js&quot;) ) } Users of the package can place the function defined above in the UI of their application to import the dependencies. R Code Not much changes from what was written before, however, it poses interesting questions with regard to the interface we want to provide users. From the user’s perspective the core of the package is the function that actually sends an alert to the clients, here created in R/core.R. #&#39; Create an Alert #&#39; @export send_alert &lt;- function(content = &quot;alert&quot;, color = &quot;blue&quot;, session){ # define notice options notice = list(content = content, color = &quot;black&quot;) # send the notice session$sendCustomMessage(type = &quot;send-alert&quot;, message = notice) } One could leave it at the function above, it could be sufficient in providing a functional R package. However one could improve somewhat on it, currently, the function requires the session object, which confuses many, most R developers, including I, have little understanding of it. This can be mitigated by providing a default using shiny::getDefaultReactiveDomain which, notwithstanding its grandiose name, simply returns the shiny session. This means that function has be run from a shiny server function but that is no limitation in this case. #&#39; Create an Alert #&#39; @export send_alert &lt;- function(content = &quot;alert&quot;, color = &quot;blue&quot;, session = shiny::getDefaultReactiveDomain()){ # define notice options notice = list(content = content, color = &quot;black&quot;) # send the notice session$sendCustomMessage(type = &quot;send-alert&quot;, message = notice) } This covers most of the R code that needs to be written, though we will come back to it shortly on as we uncover an interesting caveat. JavaScript Code Onto the JavaScript code, the custom.js to host said code is already created but remains empty. Simply using the code that was written previously will do the job for now. // custom.js Shiny.addCustomMessageHandler(type = &#39;send-alert&#39;, function(message) { message.onClose = function(){ Shiny.setInputValue(&#39;alert_close&#39;, true); } new jBox(&#39;Notice&#39;, message); }); At this stage one has a fully functional package: document, load the functions, and it can be used. devtools::document() devtools::load_all() library(shiny) ui &lt;- fluidPage( usejBox(), verbatimTextOutput(&quot;callback&quot;) ) server &lt;- function(input, output){ send_alert(&quot;Hello from the server!&quot;) output$callback &lt;- renderPrint({ paste(&quot;Is the alert closed: &quot;, input$alert_close) }) } shinyApp(ui, server) However, while the above will work for a single alert it will run into issues when creating more than one alert as multiple alerts will set a value for a single input (input$alert_close). This is can be remedied to. The package needs to provide the user a way to distinguish between alerts in order to be able to observe the correct inputs server-side. A simple solution consists in asking the user to provide an identifier (id). This identifier must be passed to the JavaScript client so the function can dynamically set the input value for that identifier, therefore it is included in the message, below we do so in such a way that the original JSON of options remains unchanged. #&#39; Create an Alert #&#39; @export send_alert &lt;- function(id, content = &quot;alert&quot;, color = &quot;blue&quot;, session = shiny::getDefaultReactiveDomain()){ # define notice options notice = list(content = content, color = &quot;black&quot;) # add id message &lt;- list(id = id, notice = notice) # send the notice session$sendCustomMessage(type = &quot;send-alert&quot;, message = message) } Now one can adapt the JavaScript code to make use of the identifier. One needs to include said identifier in the name of the input the value of which is set, below we concatenate before the original input name. This is not forced upon the developer but is a convention, packages like DT and plotly approach the issue the same way: id + name_of_input. The event is thus now appended to message.notice, which is also used when creating the jBox alert. // custom.js Shiny.addCustomMessageHandler(type = &#39;send-alert&#39;, function(message) { message.notice.onClose = function(){ console.log(&quot;close&quot;); Shiny.setInputValue(message.id + &#39;_alert_close&#39;, true); } new jBox(&#39;Notice&#39;, message.notice); }); Wrapping up Building and installing the package will now provide the user an interface demonstrated below. library(jbox) library(shiny) ui &lt;- fluidPage( usejBox(), verbatimTextOutput(&quot;callback&quot;) ) server &lt;- function(input, output){ send_alert(&quot;myid&quot;, &quot;Hello from the server!&quot;) output$callback &lt;- renderPrint({ paste(&quot;Is the alert closed: &quot;, input$myid_alert_close) }) } shinyApp(ui, server) It must be noted that though the package will be fully functional it will not pass any checks as documentation is poor and the DESCRIPTION incomplete. The API provided to the user is probably subpar in places, namely with the use of the id, which, unless the user needs to observe the respective input, is not necessary: forcing the user to provide it is not great design, consider making this optional. Exercises If one wants to create such packages or make extensive use of such integrations with Shiny, it is greatly encouraged to explore it further, namely by improving the API constructed and extending the functionalities (jBox comes with much more than just alerts), even integrate a JavaScript of your choice. At the time of writing this there is not package providing integration with jBox, if that is not of interest to the reader below are some other great libraries that are yet to be packaged in R and would greatly benefit the R community: micromodal.js - tiny, dependency-free javascript library for creating accessible modal dialogs hotkeys - Capturing keyboard inputs handtrack.js - realtime hand detection Rsup-progress - simple progress bars "],
["your-first-widget.html", "Chapter 7 Your First Widget Candidate Libraries How it works The Scaffold The Output", " Chapter 7 Your First Widget In this chapter we cover the integration of JavaScript with R using the htmlwidgets package, which focuses on libraries that produce a visual output, it is often used for data visualisation but is not limited to it. As in previous chapters we mainly learn by example, building multiple widgets of increasing complexity as we progress through the chapter. Before writing the first widget, we explore JavaScript libraries that make great candidates for htmlwidgets and attempt to understand how they work to grasp what is expected from the developer in order to integrate them with R. Finally, we build up on the previous chapter to improve how HTML widgets work with shiny. Candidate Libraries Before going down the rabbit hole it is good to take a look at the types of libraries one will work with. As htmlwidgets’ main client are JavaScript visualisation libraries let us take a look at some such popular libraries and briefly look at how they work and what they have in common. This will greatly help conceptualise what one is trying to achieve in this chapter. Plotly Plotly.js is probably one of the more popular out there, it provides over 40 fully customiseable chart types, many of which are very sophisticated. This is indeed the JavaScript library used by the R package of the same name: plotly. Looking at the code presented in the “Get Started” guide reveals just how convenient the library is. One must import plotly, of course, then have a &lt;div&gt; where to visualisation will be placed, then, using Plotly.newPlot, create the actual visualisation by passing it first the element previously mentioned and a JSON of options. &lt;!DOCTYPE html&gt; &lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; lang=&quot;&quot; xml:lang=&quot;&quot;&gt; &lt;head&gt; &lt;!-- Import library --&gt; &lt;script src=&quot;plotly-latest.min.js&quot;&gt;&lt;/script&gt; &lt;/head&gt; &lt;body&gt; &lt;!-- div to hold visualisation --&gt; &lt;div id=&quot;chart&quot; style=&quot;width:600px;height:250px;&quot;&gt;&lt;/div&gt; &lt;!-- Script to create visualsiation --&gt; &lt;script&gt; el = document.getElementById(&#39;chart&#39;); Plotly.newPlot(el, [{ x: [1, 2, 3, 4, 5], y: [1, 2, 4, 8, 16] }] ); &lt;/script&gt; &lt;/body&gt; &lt;/html&gt; Now let’s look at how another popular library does it. Highchart.js Highcharts is another library which allows creating gorgeous visualisation, maps, and more, it’s also very popular albeit not being entirely open-source. &lt;!DOCTYPE html&gt; &lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; lang=&quot;&quot; xml:lang=&quot;&quot;&gt; &lt;head&gt; &lt;!-- Import library --&gt; &lt;script src=&quot;highcharts.js&quot;&gt;&lt;/script&gt; &lt;/head&gt; &lt;body&gt; &lt;!-- div to hold visualisation --&gt; &lt;div id=&quot;chart&quot; style=&quot;width:100%; height:400px;&quot;&gt;&lt;/div&gt; &lt;!-- Script to create visualsiation --&gt; &lt;script&gt; var myChart = Highcharts.chart(&#39;chart&#39;, { xAxis: { categories: [&#39;Apples&#39;, &#39;Bananas&#39;, &#39;Oranges&#39;] }, series: [{ name: &#39;Jane&#39;, data: [1, 0, 4] }, { name: &#39;John&#39;, data: [5, 7, 3] }] }); &lt;/script&gt; &lt;/body&gt; &lt;/html&gt; The above is very similar to what plotly.js requires: import libraries, create a &lt;div&gt; where to put the visualisation, and, to create the chart, run a function which also takes the id of the div where to place the chart and a JSON of options defining the actual chart, including the data. Chart.js Chart.js is yet another library which to draw standard charts popular for its permissive license and convenient API. &lt;!DOCTYPE html&gt; &lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; lang=&quot;&quot; xml:lang=&quot;&quot;&gt; &lt;head&gt; &lt;!-- Import library --&gt; &lt;script src=&quot;Chart.min.js&quot;&gt;&lt;/script&gt; &lt;/head&gt; &lt;body&gt; &lt;!-- canvas to hold visualisation --&gt; &lt;canvas id=&quot;chart&quot; width=&quot;400&quot; height=&quot;400&quot;&gt;&lt;/canvas&gt; &lt;!-- Script to create visualsiation --&gt; &lt;script&gt; var el = document.getElementById(&#39;chart&#39;).getContext(&#39;2d&#39;); var myChart = new Chart(el, { type: &#39;bar&#39;, data: { labels: [&#39;Red&#39;, &#39;Blue&#39;, &#39;Yellow&#39;, &#39;Green&#39;, &#39;Purple&#39;, &#39;Orange&#39;], datasets: [{ label: &#39;# of Votes&#39;, data: [12, 19, 3, 5, 2, 3] }] } }); &lt;/script&gt; &lt;/body&gt; &lt;/html&gt; We again observe a very similar structure as with previous libraries. The library is imported, instead of a div chart.js uses a canvas, and the visualisation is also created from a single function which takes the canvas as first argument and a JSON of options as second. Hopefully this reveals the repeating structure such libraries tend to follow and also hints at should be reproduced, to some extent at least, using R. How it works Imagine there is no such package as HTML widgets to help create interactive visualisations from R: how would one attempt to go about it? An interactive visualisation using JavaScript will will be contained within an HTML document, therefore it would probably have to be created first. Secondly, the visualisation that is yet to be created likely relies on external libraries, these would need to be imported in the document. The document should also include an HTML element (e.g.: &lt;div&gt;) to host said visualisation. Then data would have to be serialised in R and embedded into the document where it should be read by JavaScript code that uses it to create the visualisation. Finally all should be managed to work seamlessly across R markdown, shiny, and other settings. Thankfully the htmlwidgets package is there to handle most of this. Nonetheless, it is important to understand that these operations are undertaken (to some degree) by htmlwidgets as it greatly helps use the package. Must remember when building HTML widgets: Import dependencies Create an html element to hold visualisation Serialise R data to JSON Handle JSON data to produce visualisation The Scaffold With some vague understanding of how such widgets work internally one is ready to “scaffold” one with the aim of rummaging through its components to grasp a greater understanding of how such interactive outputs are actually produced. The way one sets up such a package is stunningly simple. Below we create a package named “playground” which will be used to mess around and explore. Though one could probably create widgets outside of an R package, it would only make things more complicated. create_package(&quot;playground&quot;) Then, from the root of the package created, we scaffold a widget which we call “play”. htmlwidgets::scaffoldWidget(&quot;play&quot;) This function puts together the minimalistic structure necessary to implement an HTML widget and opens play.R, play.js and play.yaml in the RStudio IDE or the default text editor. These files are named after the widget and will form the core of the package. The R file contains core functions of the R API, namely the play function which creates the widget itself, and the render* and *output functions that handle the widget in the shiny server and UI respectively. The .js file contains JavaScript functions that actually generate the visual output. devtools::document() devtools::load_all() It might be hard to believe, but at this stage one already has a fully functioning widget ready to use after documenting, and building the package. Indeed, the play.R file that that was created contains a function named “play” ẁhich takes, amongst other arguments, a message. play(message = &quot;This is a widget!&quot;) First HTML widget This displays the message in the RStudio “Viewer,” or the your default browser which indicates that the function does indeed create an HTML output. One can use the the button located in the top right of the RStudio “Viewer” to open the message in web browser which can prove very useful to look under the hood of the widgets for debugging. The Output With an out-of-the-box HTML widget package one can start exploring the internals to understand how it works. Let’s start by retracing the path taken by the message written in R to its seemingly magical appearance in HTML. The play function previously used, takes the message wraps it into a list which is then used in htmlwidgets::createWidget. # forward options using x x = list( message = message ) Wrapping a string in a list might seem unnecessary but one will eventually add variables when building a more complex widget, starting with a list makes it easier to add them later on. To investigate the widget we should look under the hood; the source code of the created (and rendered) output can be accessed in different ways, 1) by right-clicking on the message displayed in the RStudio Viewer and selecting “Inspect element,” or 2) by opening the visualisation in your browser using the button located in the top right of the “Viewer,” and in the browser right clicking on the message to select “Inspect.” The latter is advised as web browsers such as Chrome or Firefox provide much friendlier interfaces for such functionalities as well as shortcuts to inspect or view the source code of a page. Below is a part of the &lt;body&gt; of the output of play(\"This is a widget!\") obtained with the method described in the previous paragraph. &lt;div id=&quot;htmlwidget_container&quot;&gt; &lt;div id=&quot;htmlwidget-c21cca0e76e520b46fc7&quot; style=&quot;width:960px;height:500px;&quot; class=&quot;play html-widget&quot;&gt;This is a widget!&lt;/div&gt; &lt;/div&gt; &lt;script type=&quot;application/json&quot; data-for=&quot;htmlwidget-c21cca0e76e520b46fc7&quot;&gt;{&quot;x&quot;:{&quot;message&quot;:&quot;This is a widget!&quot;},&quot;evals&quot;:[],&quot;jsHooks&quot;:[]}&lt;/script&gt; One thing the source code of the rendered output reveals is the element (div) created by the htmlwidgets package to hold the message (the class name is identical to that of the widget, play), as well as, below it, in the &lt;script&gt; tag, the JSON object which includes the x variable used in the play function. The div created bears a randomly generated id which one can define when creating the widget using the elementId argument. # specify the id play(&quot;This is another widget&quot;, elementId = &quot;myViz&quot;) &lt;!-- div bears id specified in R --&gt; &lt;div id=&quot;myViz&quot; style=&quot;width:960px;height:500px;&quot; class=&quot;play html-widget&quot;&gt;This is another widget&lt;/div&gt; You will also notice that this affects the script tag below it, the data-for attribute of which is also set to “myViz,” this indicates that it is used to tie the JSON data to a div, essential for htmlwidgets to manage multiple visualisation in R markdown or Shiny for instance. Then again, this happens in the background without the developer (you) having to worry about it. &lt;script type=&quot;application/json&quot; data-for=&quot;myViz&quot;&gt;{&quot;x&quot;:{&quot;message&quot;:&quot;This is a widget!&quot;},&quot;evals&quot;:[],&quot;jsHooks&quot;:[]}&lt;/script&gt; Inspecting the output also shows the dependencies imported, these are placed within the head HTML tags at the top of the page. &lt;script src=&quot;lib/htmlwidgets-1.5.1/htmlwidgets.js&quot;&gt;&lt;/script&gt; &lt;script src=&quot;lib/play-binding-0.0.0.9000/play.js&quot;&gt;&lt;/script&gt; This effectively imports the htmlwidgets.js library as well as the play.js file, and were the visualisation depending on external libraries they would appear alongside those. Peaking inside the play.js file located at inst/htmlwidgets/play.js reveals the code below we see: // play.js HTMLWidgets.widget({ name: &#39;play&#39;, type: &#39;output&#39;, factory: function(el, width, height) { // TODO: define shared variables for this instance return { renderValue: function(x) { // TODO: code to render the widget, e.g. el.innerText = x.message; }, resize: function(width, height) { // TODO: code to re-render the widget with a new size } }; } }); However convoluted this may appear at first do not let that intimate you. The factory function returns two functions, one of which, resize, is currently empty, let’s therefore look at the other one first, renderValue: the function that in fact renders the visualisation. It takes an object x from which is accesses the “message” variable that it uses as text for object el (el.innerText). The object x passed to this function is actually the list of the same name that was build in the R function play! While in R one would access the message in list x with x$message in JavaScript to access the message in the JSON x one writes x.message, only changing the dollar sign to a dot. Let’s show this perhaps more clearly by printing the content of x. console.log(x); el.innerText = x.message; We place console.log to print the content of x in the console, reload the package with devtools::load_all and use the function play again then explore the console from the browser (inspect and go to the “console” tab). Console tab output This displays the JSON object containing the message: it looks eerily similar to the list that was created in R (x = list(message = \"This is a widget!\")). What one should take away from this is that data that needs to be communicated from R to the JavaScript function should be placed in the R list x. This list is serialised to JSON and placed in the HTML output in a script tag with a data-for attribute. This attribute indicates which widget the data is destined for. This effectively enables htmlwidgets to match the serialised data with the output elements: data in &lt;script data-for='viz'&gt; is to be used to create a visualisation in &lt;div id='viz'&gt;. Before we move on to other things one should also grasp a better understanding of the el object, which can also be logged in the console. console.log(x); console.log(el); el.innerText = x.message; Console tab output This displays the HTML element created by htmlwidgets that is meant to hold the visualisation, or in this case, the message. If you are familiar with JavaScript, this is the element that would be returned by document.getElementById. This object allows manipulating the element in pretty much any way imaginable, change its position, its colour, its size, or, as done here, to insert some text in its place. What’s more one can access attributes of the object just like a JSON array. Therefore one can log the id of the element. // print the id of the element console.log(el.id); el.innerText = x.message; Making the modifications above and reloading the package, one can create a widget given a specific id and see it displayed in the console, e.g.: play(\"hello\", elementId = \"see-you-in-the-console\"). In an attempt to become more at ease with this setup let us change something and play with the widget. Out-of-the-box htmlwidgets uses innerText, which does very much what it says on the tin, it places text inside an element. JavaScript comes with another function akin to innerText, innerHTML. While the former only allows inserting text the former lets one insert any HTML. el.innerHTML = x.message; After changing the play.js file as above, and re-loading the package, one can use arbitrary HTML as messages. play(&quot;&lt;h1&gt;Using HTML!&lt;/h1&gt;&quot;) Widget output That makes for a great improvement which opens the door to many possibilities. However, the interface this provides is unintuitive. Albeit similar, R users are more familiar with shiny and htmltools (RStudio and Inc. 2019) tags than HTML tags, e.g.: &lt;h1&gt;&lt;/h1&gt; translates to h1() in R. The package should allow users to use those instead of forcing them to collapse HTML content in a string. Fortunately, there is a very easy way to obtain the HTML from those functions: convert it to a character string. html &lt;- shiny::h1(&quot;HTML tag&quot;) class(html) ## [1] &quot;shiny.tag&quot; # returns string as.character(html) ## [1] &quot;&lt;h1&gt;HTML tag&lt;/h1&gt;&quot; Implementing this in the play function will look like this. # forward options using x x = list( message = as.character(message) ) Reloading the package with devtools::load_all lets one use shiny tags as the message. play(shiny::h2(&quot;Chocolate is a colour&quot;, style = &quot;color:chocolate;&quot;)) Using shiny tags This hopefully provides some understanding of how htmlwidgets work internally and thereby helps building such packages. To recapitulate, an HTML document is created in which div is placed and given a certain id, this id is also used in a script tag that contains JSON data passed from R so that a JavaScript function we define can read that data in and use it to generate a visual output in a div. However, as much as this section covered, the topic of JavaScript dependencies was not touched, this is approached in the following section where we build another, more interesting widget, which uses an external dependency. References "],
["a-realistic-widget.html", "Chapter 8 A Realistic Widget Dependency JavaScript HTML Element Exercises", " Chapter 8 A Realistic Widget In this section we build a package called typed, which wraps the JavaScript library of the same name, typed.js that mimics text being typed. This builds upon many things we explored in the playground package. usethis::create_package(&quot;typed&quot;) htmlwidgets::scaffoldWidget(&quot;typed&quot;) As done with candidate libraries, let’s take a look at documentation of typed.js to see how typed.js works. &lt;!DOCTYPE html&gt; &lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; lang=&quot;&quot; xml:lang=&quot;&quot;&gt; &lt;head&gt; &lt;!-- Import library --&gt; &lt;script src=&quot;typed.js&quot;&gt;&lt;/script&gt; &lt;/head&gt; &lt;body&gt; &lt;!-- div to hold visualisation --&gt; &lt;div class=&quot;element&quot;&gt;&lt;/div&gt; &lt;!-- Script to create visualsiation --&gt; &lt;script&gt; var typed = new Typed(&#39;.element&#39;, { strings: [&#39;First sentence.&#39;, &#39;And a second sentence.&#39;] }); &lt;/script&gt; &lt;/body&gt; &lt;/html&gt; The code above is not very different from what was observed in other libraries: the library is imported, there is a &lt;div&gt; where the output will be generated, and a script which also takes a selector and a JSON of options. Dependency Once the package created and the widget scaffold laid down we need to add the JavaScript dependency without which nothing can move forward. The documentation in the README of typed.js states that it can be imported like so. &lt;script src=&quot;https://cdn.jsdelivr.net/npm/typed.js@2.0.11&quot;&gt;&lt;/script&gt; First, we will download the dependency, which consists of a single JavaScript file, instead of using the CDN as this ultimately makes the package more robust (more easily reproducible outputs and no requirement for internet connection). Below we place the dependency in a “typed” directory within the “htmlwidgets” folder. dir.create(&quot;./inst/htmlwidgets/typed&quot;) cdn &lt;- &quot;https://cdn.jsdelivr.net/npm/typed.js@2.0.11&quot; download.file(cdn, &quot;./inst/htmlwidgets/typed/typed.min.js&quot;) This produces a directory that looks like this: . ├── DESCRIPTION ├── NAMESPACE ├── R │ └── typed.R └── inst └── htmlwidgets ├── typed │ └── typed.min.js ├── typed.js └── typed.yaml In htmlwidgets packages dependencies are specified in the .yml file located at inst/htmlwidgets which at first contains a commented template. # (uncomment to add a dependency) # dependencies: # - name: # version: # src: # script: # stylesheet: Let’s uncomment those lines as instructed at the top of the file and fill it in. dependencies: - name: typed.js version: 2.0.11 src: htmlwidgets/typed script: typed.min.js We remove the stylesheet entry as this package does not require any CSS files. The src specifies the path to the directory containing the scripts and stylesheets. This is akin to using the system.file function to return the full path to a file or directory within the package. devtools::load_all() system.file(&quot;htmlwidgets/typed&quot;, package = &quot;typed&quot;) #&gt; &quot;/home/me/packages/typed/inst/htmlwidgets/typed&quot; We should verify that this is correct by using the one R function the package features and check the source code of the output to verify that the typed.js is indeed imported. We thus run typed(\"test\"), open the output in the browser () and look at the source code of the page (right click and select “View page source”). At the top of the page one should see typed.min.js imported, click the link to ensure it correctly points to the dependency. &lt;!DOCTYPE html&gt; &lt;html&gt; &lt;head&gt; &lt;meta charset=&quot;utf-8&quot;/&gt; &lt;style&gt;body{background-color:white;}&lt;/style&gt; &lt;script src=&quot;lib/htmlwidgets-1.5.1/htmlwidgets.js&quot;&gt;&lt;/script&gt; &lt;script src=&quot;lib/typed.js-2.0.11/typed.min.js&quot;&gt;&lt;/script&gt; &lt;script src=&quot;lib/typed-binding-0.0.0.9000/typed.js&quot;&gt;&lt;/script&gt; ... JavaScript On its official website, typed.js gives the following example. The JavaScript function Typed takes two arguments, first the selector, the element to hold the output, second a JSON of options to specify what is being typed and a myriad of other things. var typed = new Typed(&#39;.element&#39;, { strings: [&quot;First sentence.&quot;, &quot;Second sentence.&quot;], typeSpeed: 30 }); Let’s place it in the package by replacing the content of the renderValue in typed.js with the above. ... renderValue: function(x) { var typed = new Typed(&#39;.element&#39;, { strings: [&quot;First sentence.&quot;, &quot;Second sentence.&quot;], typeSpeed: 30 }); } ... One could be tempted to run devtools::load_all but this will not work, namely because the function uses a selector that is will not return any object; it needs to be applied to the div created by the widget not .element. As hinted at in the playground, the selector of the element created is accessible from the el object. As a matter of fact, we did log in the browser console the id of the created div taken from el.id. Therefore concatenating the pound sign and the element id produces the select to said element. (.class, #id) // typed.js ... renderValue: function(x) { var typed = new Typed(&#39;#&#39; + el.id, { strings: [&quot;First sentence.&quot;, &quot;Second sentence.&quot;], typeSpeed: 30 }); } ... This should now work, run devtools::load_all followed by typed(\"whatever\") and the JavaScript animated text will appear! It’s not of any use just yet as the options, included the text being typed is predefined: the package is currently not making any use the of the inputs passed from R. Below change the default strings to x.message. // typed.js ... renderValue: function(x) { var typed = new Typed(&#39;#&#39; + el.id, { strings: x.message, typeSpeed: 30 }); } ... This, however, will cause issues as the strings options expects and array (vector) and not a single string. This is something often forgotten when working with R, there is no scalar values, in R a scalar is vector of length 1. typed(&quot;does not work&quot;) # length = 1 typed(c(&quot;This&quot;, &quot;will&quot;, &quot;work&quot;)) # length &gt; 1 One solution is to force the input into a list. # typed.R x = list( message = as.list(message) ) At this juncture the package works but there is a salient issue with the way it handles options. Why build a list in R to reconstruct it in JavaScript manually. Since the options are serialised in R to JSON and that typed.js expects a JSON of options it is actually cleaner and more convenient to construct an R list that mirrors the JSON array so one can use is as-is in JavaScript. In fact, renaming the message to strings effectively does this. # typed.R x = list( strings = as.list(message) ) This allows greatly simplifying the code JavaScript side, making it much easier to add other options down the line, maintain, debug, and read. // typed.js ... renderValue: function(x) { var typed = new Typed(&#39;#&#39; + el.id, x); } ... One can now add more options from the R code without having to alter any of the JavaScript. Let us demonstrate with the loop option. typed &lt;- function(message, loop = FALSE, width = NULL, height = NULL, elementId = NULL) { # forward options using x x = list( loop = loop, strings = as.list(message) ) # create widget htmlwidgets::createWidget( name = &#39;typed&#39;, x, width = width, height = height, package = &#39;typed&#39;, elementId = elementId ) } HTML Element As pointed out multiple times, the widget is generated in a &lt;div&gt;, which is works fine for most visualisation libraries. But we saw that chart.js requires placing it in a &lt;canvas&gt;, so one needs the ability to change that. It could be interesting to apply this to typed.js too as within a &lt;div&gt; it cannot be placed inline, using a &lt;span&gt;, however, this would work. This can be changed by placing a function named nameOfWidget_html which looked up by htmlwidgets and used if found. This function takes the three-dot construct ... and uses them in an htmltools tag. The three-dots are necessary because internally htmlwidgets needs be able to pass arguments, such as the all too critical id. typed_html &lt;- function(...){ htmltools::tags$span(...) } Exercises The full list of which is available in the documentation of typed.js. There are multiple ways to complete this package with regard to the options that are made available R-side and the API one wants to provide users of the package. Keep adding arguments as done with loop Use the three-dot construct (...) instead of adding arguments individually. Provide other functions for additional options. It might be unclear how to implement the last point, this is something we’ll explore in the following section. "],
["the-full-monty.html", "Chapter 9 The Full Monty Dependencies JavaScript Working with Data Transforming Data On Print JavaScript Functions", " Chapter 9 The Full Monty With a first widget built one can jump onto another one: gio.js, a library to draw arcs between countries on a 3 dimensional globe. This will include many more functionalities such packages can comprise. Example of Gio.js visualisation Then again, the first order of business when looking to integrate a library is to look at the documentation to understand what is should be reproduced in R. &lt;!DOCTYPE html&gt; &lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; lang=&quot;&quot; xml:lang=&quot;&quot;&gt; &lt;head&gt; &lt;!-- Import libraries --&gt; &lt;script src=&quot;three.min.js&quot;&gt;&lt;/script&gt; &lt;script src=&quot;gio.min.js&quot;&gt;&lt;/script&gt; &lt;/head&gt; &lt;body&gt; &lt;!-- div to hold visualisation --&gt; &lt;div id=&quot;globe&quot; style=&quot;width: 200px; height: 200px&quot;&gt;&lt;/div&gt; &lt;!-- Script to create visualsiation --&gt; &lt;script&gt; var container = document.getElementById(&quot;globe&quot;); var controller = new GIO.Controller(container); controller.addData(data); controller.init(); &lt;/script&gt; &lt;/body&gt; &lt;/html&gt; Gio.js has itself a dependency, three.js, which needs to be imported before gio.js, other than that not much differs from libraries previously explored in this chapter. usethis::create_package(&quot;gio&quot;) htmlwidgets::scaffoldWidget(&quot;gio&quot;) Dependencies Handling the dependencies does differ much, we only need to download two libraries instead of one. # create directories for JS dependencies dir.create(&quot;./inst/htmlwidgets/three&quot;, recursive = TRUE) dir.create(&quot;./inst/htmlwidgets/gio&quot;, recursive = TRUE) # download JS dependencies three &lt;- &quot;https://cdnjs.cloudflare.com/ajax/libs/three.js/110/three.min.js&quot; gio &lt;- &quot;https://raw.githubusercontent.com/syt123450/giojs/master/build/gio.min.js&quot; download.file(three, &quot;./inst/htmlwidgets/three/three.min.js&quot;) download.file(gio, &quot;./inst/htmlwidgets/gio/gio.min.js&quot;) This should produce the following working directory. . ├── DESCRIPTION ├── NAMESPACE ├── R │ └── gio.R └── inst └── htmlwidgets ├── gio │ └── gio.min.js ├── gio.js ├── gio.yaml └── three └── three.min.js The libraries have been downloaded but the gio.yml file is yet to be edited. The order in which the libraries are listed matters; just as in HTML three.js needs to precede gio.js as the former depends on the latter and not vice versa. dependencies: - name: three version: 110 src: htmlwidgets/three script: three.min.js - name: gio version: 2.0 src: htmlwidgets/gio script: gio.min.js JavaScript Let’s copy the JavaScript code from the Get Started section of gio.js in the gio.js file’s renderValue function. At this point the data format is not known so we comment the line which adds data to the visualisation. ... renderValue: function(x) { var container = document.getElementById(&quot;globe&quot;); var controller = new GIO.Controller(container); //controller.addData(data); controller.init(); } ... One can document and load the package build it likely will not work as the code above attempts to place the visualisation in a div with id = \"globe\". As for the previously written widget, this needs to be changed to el.id so the visualisation can correctly render in the HTML element generated by the widget. ... renderValue: function(x) { var container = document.getElementById(el.id); var controller = new GIO.Controller(container); //controller.addData(data); controller.init(); } ... At this stage the widget should generate a visualisation. devtools::document() devtools::load_all() gio(message = &quot;This required but not used&quot;) Output without data Not too shabby! Working with Data An interesting start, now onto adding data. Let’s take a look at the documentation to see what data the library expects. [ { &quot;e&quot;: &quot;CN&quot;, &quot;i&quot;: &quot;US&quot;, &quot;v&quot;: 3300000 }, { &quot;e&quot;: &quot;CN&quot;, &quot;i&quot;: &quot;RU&quot;, &quot;v&quot;: 10000 } ] The JSON data should constitutes of arrays that denote arcs to draw on the globe where each arc is defined by an exporting country (e), an importing country (i), and is given a value (v). The importing and exporting country, the source and target of the arc, are indicated by ISO alpha-2 country codes. We can read this JSON into R. # data.frame to test arcs &lt;- jsonlite::fromJSON( &#39;[ { &quot;e&quot;: &quot;CN&quot;, &quot;i&quot;: &quot;US&quot;, &quot;v&quot;: 3300000 }, { &quot;e&quot;: &quot;CN&quot;, &quot;i&quot;: &quot;RU&quot;, &quot;v&quot;: 10000 } ]&#39; ) print(arcs) ## e i v ## 1 CN US 3300000 ## 2 CN RU 10000 Jsonlite automagically converts the JSON into a data frame where each row is an arc, which is great as R users tend to prefer rectangular data over lists: this probably what the package should use as input too. Let us make some changes to the gio function so it takes data as input. gio &lt;- function(data, width = NULL, height = NULL, elementId = NULL) { # forward options using x x = list( data = data ) # create widget htmlwidgets::createWidget( name = &#39;gio&#39;, x, width = width, height = height, package = &#39;gio&#39;, elementId = elementId ) } Then tiny changes to play.js where we uncomment the line that line previously commented and use x.data passed from R. ... renderValue: function(x) { var container = document.getElementById(el.id); var controller = new GIO.Controller(container); controller.addData(x.data); // uncomment &amp; use x.data controller.init(); } ... We can now use the function with the data to plot arcs! devtools::document() devtools::load_all() gio(arcs) Unfortunately, this breaks everything and we are presented with a blank screen. Using console.log or looking at the source code the rendered widget reveals the problem: the data isn’t actually in the correct format! {&quot;x&quot;:{&quot;data&quot;:{&quot;e&quot;:[&quot;CN&quot;,&quot;CN&quot;],&quot;i&quot;:[&quot;US&quot;,&quot;RU&quot;],&quot;v&quot;:[3300000,10000]}},&quot;evals&quot;:[],&quot;jsHooks&quot;:[]} Htmlwidgets actually serialised the data frame column-wise (long) and not row-wise (wide). Transforming Data There are multiple ways to transform the data and ensure the serialised JSON is as the JavaScript expects it to be. In JavaScript One can use JavaScript to transform the data, leaving everything as-is R side to further handle the data JavaScript side. The HTMLwidget JavaScript library (already imported by default) exports an object which provides a method, dataframeToD3, to transform the data from long to wide. ... renderValue: function(x) { // long to wide x.data = HTMLWidgets.dataframeToD3(x.data); var container = document.getElementById(el.id); var controller = new GIO.Controller(container); controller.addData(x.data); controller.init(); } ... In R Instead of serialising the data a certain way then correct in JavaScript as demonstrated previously, one can also modify, or even replace, htmlwidgets’ default serialiser. Speaking of which, below is the default serializer. function (x, ..., dataframe = &quot;columns&quot;, null = &quot;null&quot;, na = &quot;null&quot;, auto_unbox = TRUE, digits = getOption(&quot;shiny.json.digits&quot;, 16), use_signif = TRUE, force = TRUE, POSIXt = &quot;ISO8601&quot;, UTC = TRUE, rownames = FALSE, keep_vec_names = TRUE, strict_atomic = TRUE) { if (strict_atomic) x &lt;- I(x) jsonlite::toJSON(x, dataframe = dataframe, null = null, na = na, auto_unbox = auto_unbox, digits = digits, use_signif = use_signif, force = force, POSIXt = POSIXt, UTC = UTC, rownames = rownames, keep_vec_names = keep_vec_names, json_verbatim = TRUE, ...) } The problem we face is caused by the dataframe argument which is set to columns whereas we need it set to rows. This can be done by passing the arguments to the serialiser is a list as TOJSON_ARGS attribute of the object x that is serialised. We could thus change the gio function to reflect the aforementioned change. gio &lt;- function(data, width = NULL, height = NULL, elementId = NULL) { # forward options using x x = list( data = data ) # serialise data.frames to wide (not long as default) attr(x, &#39;TOJSON_ARGS&#39;) &lt;- list(dataframe = &quot;rows&quot;) # create widget htmlwidgets::createWidget( name = &#39;gio&#39;, x, width = width, height = height, package = &#39;gio&#39;, elementId = elementId ) } The above may seem confusing at first as one rarely encounters the attr replacement function. attr(cars, &quot;hello&quot;) &lt;- &quot;attributes&quot; # set attr(cars, &quot;hello&quot;) # get ## [1] &quot;attributes&quot; Otherwise one can completely override the serializer, also by setting an attribute, TOJSON_FUNC, to the function which should be used to serialise the data. Below the serialiser is changed to using jsonify (Cooley 2020) which by default serialises data frames to wide, unlike htmlwidgets’ serialiser, thereby also fixing the issue. gio &lt;- function(data, width = NULL, height = NULL, elementId = NULL) { # forward options using x x = list( data = data ) # replace serialiser attr(x, &#39;TOJSON_FUNC&#39;) &lt;- gio_serialiser # create widget htmlwidgets::createWidget( name = &#39;gio&#39;, x, width = width, height = height, package = &#39;gio&#39;, elementId = elementId ) } gio_serialiser &lt;- function(x){ jsonify::to_json(x, unbox = TRUE) } Alternatively, one can also leave all serialisers unchanged and instead format the data in R prior to the serialisation, changing the dataframe to a row-wise list. # forward options using x x = list( data = apply(data, 1, as.list) ) Pros &amp; Cons There are pros and cons to each methods. The preferable method is probably to change the arguments that cause issue, this is the method used in the remaining of the book. Replacing the serialiser in its entirety should not be necessary, only do this once you are very familiar with serialisation and truly see a need for it. Transforming the data in JavaScript has one drawback, HTMLWidgets.dataframeToD3 cannot be applied to the entire x object but the subsets that hold the data frame which tends to lead to clunky code as one uses said function in various places and has to add if statements to make sure data is present, etc. This will become more evident as we progress. Gio output with correct serialisation On Print Let’s add the option to style the globe, gio.js provides themes but they are currently not applicable from R. As a matter of fact, gio.js provides dozens of customisation options that should be integrated into the package. These probably should be split across functions, just like they are in gio.js, rather than all grouped into a single function. This may first appear as difficult to implement, how, when, how would one use another function given the function gio generates the visualisation? The gio function creates everything needed for the visualisation to be generated but does not actually render anything, it returns an object of class “htmlwidget” which itself renders the visualisation on print (literally htmlwidget.print method). g &lt;- gio(arcs) # nothing renders g # visualisation renders Therefore, one can use functions on the object returned by gio to further modify that object. str(arcs) ## List of 8 ## $ x :List of 1 ## ..$ data:&#39;data.frame&#39;: 2 obs. of 3 variables: ## .. ..$ e: chr [1:2] &quot;CN&quot; &quot;CN&quot; ## .. ..$ i: chr [1:2] &quot;US&quot; &quot;RU&quot; ## .. ..$ v: int [1:2] 3300000 10000 ## ..- attr(*, &quot;TOJSON_ARGS&quot;)=List of 1 ## .. ..$ dataframe: chr &quot;rows&quot; ## $ width : NULL ## $ height : NULL ## $ sizingPolicy :List of 6 ## ..$ defaultWidth : NULL ## ..$ defaultHeight: NULL ## ..$ padding : NULL ## ..$ viewer :List of 6 ## .. ..$ defaultWidth : NULL ## .. ..$ defaultHeight: NULL ## .. ..$ padding : NULL ## .. ..$ fill : logi TRUE ## .. ..$ suppress : logi FALSE ## .. ..$ paneHeight : NULL ## ..$ browser :List of 5 ## .. ..$ defaultWidth : NULL ## .. ..$ defaultHeight: NULL ## .. ..$ padding : NULL ## .. ..$ fill : logi FALSE ## .. ..$ external : logi FALSE ## ..$ knitr :List of 3 ## .. ..$ defaultWidth : NULL ## .. ..$ defaultHeight: NULL ## .. ..$ figure : logi TRUE ## $ dependencies : NULL ## $ elementId : NULL ## $ preRenderHook: NULL ## $ jsHooks : list() ## - attr(*, &quot;class&quot;)= chr [1:2] &quot;gio&quot; &quot;htmlwidget&quot; ## - attr(*, &quot;package&quot;)= chr &quot;gio&quot; JavaScript Functions References "],
["for-the-curious.html", "Chapter 10 For The Curious", " Chapter 10 For The Curious htmlwidgets inner-workings "],
["references.html", "References", " References Attali, Dean. 2020. Shinyjs: Easily Improve the User Experience of Your Shiny Apps in Seconds. https://CRAN.R-project.org/package=shinyjs. Chamberlain, Scott, and Jeff Hollister. 2019. Lawn: Client for ’Turfjs’ for ’Geospatial’ Analysis. https://CRAN.R-project.org/package=lawn. Chang, Winston. 2019. R6: Encapsulated Classes with Reference Semantics. https://CRAN.R-project.org/package=R6. Chang, Winston, Joe Cheng, JJ Allaire, Yihui Xie, and Jonathan McPherson. 2020. Shiny: Web Application Framework for R. https://CRAN.R-project.org/package=shiny. Coene, John. 2020. Waiter: Loading Screen for ’Shiny’. Cooley, David. 2020. Jsonify: Convert Between ’R’ Objects and Javascript Object Notation (Json). Csárdi, Gábor. 2020. Cli: Helpers for Developing Command Line Interfaces. https://CRAN.R-project.org/package=cli. Fay, Colin. 2020. Bubble: Launch and Interact with a Nodejs Session. Guyader, Vincent, Colin Fay, Sébastien Rochette, and Cervan Girard. 2020. Golem: A Framework for Robust Shiny Applications. https://CRAN.R-project.org/package=golem. Hester, Jim, Gábor Csárdi, Hadley Wickham, Winston Chang, Martin Morgan, and Dan Tenenbaum. 2020. Remotes: R Package Installation from Remote Repositories, Including ’Github’. https://CRAN.R-project.org/package=remotes. Inc, Facebook, Michel Weststrate, Kent Russell, and Alan Dipert. 2019. ReactR: React Helpers. https://CRAN.R-project.org/package=reactR. Kunst, Joshua. 2019. Highcharter: A Wrapper for the ’Highcharts’ Library. https://CRAN.R-project.org/package=highcharter. Lin, Greg. 2019. Reactable: Interactive Data Tables Based on ’React Table’. https://CRAN.R-project.org/package=reactable. Luraschi, Javier, and JJ Allaire. 2018. R2d3: Interface to ’D3’ Visualizations. https://CRAN.R-project.org/package=r2d3. Ooms, Jeroen. 2020. Jsonlite: A Robust, High Performance Json Parser and Generator for R. https://CRAN.R-project.org/package=jsonlite. RStudio, and Inc. 2019. Htmltools: Tools for Html. https://CRAN.R-project.org/package=htmltools. Sievert, Carson, Chris Parmer, Toby Hocking, Scott Chamberlain, Karthik Ram, Marianne Corvellec, and Pedro Despouy. 2020. Plotly: Create Interactive Web Graphics via ’Plotly.js’. https://CRAN.R-project.org/package=plotly. Ushey, Kevin, JJ Allaire, and Yuan Tang. 2019. Reticulate: Interface to ’Python’. https://CRAN.R-project.org/package=reticulate. Vaidyanathan, Ramnath, Yihui Xie, JJ Allaire, Joe Cheng, and Kenton Russell. 2019. Htmlwidgets: HTML Widgets for R. https://CRAN.R-project.org/package=htmlwidgets. Wickham, Hadley, and Jennifer Bryan. 2020. Usethis: Automate Package and Project Setup. Wickham, Hadley, Peter Danenberg, Gábor Csárdi, and Manuel Eugster. 2020. Roxygen2: In-Line Documentation for R. https://CRAN.R-project.org/package=roxygen2. Wickham, Hadley, Jim Hester, and Winston Chang. 2020. Devtools: Tools to Make Developing R Packages Easier. https://CRAN.R-project.org/package=devtools. Xie, Yihui, Joe Cheng, and Xianying Tan. 2020. DT: A Wrapper of the Javascript Library ’Datatables’. https://CRAN.R-project.org/package=DT. "]
]
